#include "help_functions.h"

void vetorize_even(string vet, int vetor[][20]){
    int it = 0;
    int aux;
    for(int i = 0; i<20; i++){
            for(int j = 0; j < 20; j++){
                aux = vet.at(it) - '0';
                aux = aux*10;
                vetor[i][j] = vet.at(it+1) - '0';
                vetor[i][j] += aux;
                it += 2;
            }
    }
}


long int largest_product_in_grid(){
    string aux = "08022297381500400075040507785212507791084949994017811857608717409843694804566200814931735579142993714067538830034913366552709523046011426924685601325671370236912231167151676389419236542240402866331380244732609903450244753353783684203517125032988128642367102638406759547066183864706726206802621220956394396308409166499421245558056673992697177878968314883489637221362309750076442045351400613397343133957817532822753167159403800462161409535692163905429635314755588824001754243629855786560048357189070544443744602158515417581980816805944769287392138652177704895540045208839735991607975732162626793327986688366887576220720346336746551232639353690442167338253911249472180846293240627636206936417230238834629969826759857404361620733529783190017431497148868116235705540170547183515469169233486143520189196748";
    int vet[20][20];
    int aux2;
    long int maior = 0;
    vetorize_even(aux,vet);
    for(int i = 0; i < 20; i++){
        for(int j = 0; j < 20; j++){
                if((j<=16)&&(i<=16)){
                    aux2 = vet[i][j]*vet[i+1][j+1]*vet[i+2][j+2]*vet[i+3][j+3];
                    if(aux2>maior){
                        maior = aux2;
                    }
                }
                    if(j<=16){
                    aux2 = vet[i][j]*vet[i][j+1]*vet[i][j+2]*vet[i][j+3];
                    if(aux2>maior){
                        maior = aux2;
                    }
                    }
                    if((i<=16)){
                    aux2 = vet[i][j]*vet[i+1][j]*vet[i+2][j]*vet[i+3][j];
                    if(aux2>maior){
                        maior = aux2;
                    }
                    }
                    if((j<=16)&&(i>=3)){
                    aux2 = vet[i][j]*vet[i-1][j+1]*vet[i-2][j+2]*vet[i-3][j+3];
                    if(aux2>maior){
                        maior = aux2;
                    }
                }
        }
    }
    return maior;
}

int main(){
    cout<<largest_product_in_grid();
    return 0;

}
